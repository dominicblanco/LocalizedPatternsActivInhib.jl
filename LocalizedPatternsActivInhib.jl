# Computer assisted proof of solutions for the 1D Gylcolsis, Brusselator, Root-Hair, Selkov-Schnakenberg, and Schnakenberg models.
# These are models falling within a general class of Activiator-Inhibitor models of the form 
# ‚àÇ‚Çúu = Œ¥¬≤ Œîu - cu + dv + u¬≤v + a 
# ‚àÇ‚Çúv = Œîv + hu - jv - u¬≤v + b 
# (u,v) = (u(x,t),v(x,t))
# The following code computes the solution and rigorously proves Theorems 4.9, 4.10, 4.11, 4.12, 4.13, 4.14, 6.7, and 6.8 in Sections 4.2 and 6.3 of
# "Proving the existence of localized patterns and saddle node bifurcations in 1D activiator-inhibitor type models"  D. Blanco, M. Cadiot, and D. Fassler

#####################################################################################################################################################################

# Needed packages
using RadiiPolynomial, LinearAlgebra, JLD2
include("matproducts.jl")

#####################################################################################################################################################################


#################################### List of the needed functions : go directly to line 186 for the main code ################################################# 

# Performs the estimate of Lemma 4.1
function œÜ(A,B,C,D)
    O‚ÇÅ = max(A,D) + max(B,C)
    O‚ÇÇ = sqrt(A^2 + D^2 + B^2 + C^2)
    return min(O‚ÇÅ,O‚ÇÇ)
end

function _conv_small(u,v,N)
    #Computes u*v only up to order N
    order_u = order(space(u))[1]
    order_v = order(space(v))[1]
    C = Sequence(CosFourier(N,frequency(u)[1]), interval.((zeros(N+1))))
    for i ‚àà 0:N
        C·µ¢ = interval(zero(Float64))
        for j ‚àà max(i-order_u, -order_v):min(i+order_u, order_v)
            tu = abs(i-j)
            tv = abs(j)
            C·µ¢ += u[tu] * v[tv]
        end
        C[i] = C·µ¢
    end
    return C
end

#Builds Matrix P for trace
function trace2(N)
    P = Int.(zeros(N+1,N+1))
    P[2:end,2:end] = Matrix(I,N,N)
    for n = 1:N
        P[1,n+1] = (Int(-2*(-1)^n))
    end
    return P
end

# Computes the roots of the polynomial ax¬≤ + bx + c
function quad_roots(a, b, c)
    D = b^2 - interval(4)*a*c
    if sup(D) < 0
        D = Complex(D)
        sqrtD = sqrt(D)
        return [(-b + sqrtD) / (interval(2)*a), (-b - sqrtD) / (interval(2)*a)]
    else
        sqrtD = sqrt(D)
        return [(-b + sqrtD) / (interval(2)*a), (-b - sqrtD) / (interval(2)*a)]
    end
end

function integral_computation(ŒΩ, ŒΩ‚ÇÅ, ŒΩ‚ÇÇ, ŒΩ‚ÇÉ)
    # This function computes the integral squared of $\frac{(a‚ÇÅŒæ¬≤ + a‚ÇÇ)¬≤}{l_{den}(Œæ)^2}$

    # Compute roots of l_den
    y‚ÇÅ¬≤, y‚ÇÇ¬≤ = Complex.(quad_roots(interval(2œÄ)^4*ŒΩ, interval(2œÄ)^2*(ŒΩ*ŒΩ‚ÇÇ - ŒΩ‚ÇÅ), -ŒΩ‚ÇÇ*(ŒΩ‚ÇÅ + ŒΩ‚ÇÉ)))
    y‚ÇÅ = sqrt(Complex(y‚ÇÅ¬≤))
    y‚ÇÇ = sqrt(Complex(y‚ÇÇ¬≤))

    if sup(imag(y‚ÇÅ)) < 0
        y‚ÇÅ = -y‚ÇÅ
    elseif sup(imag(y‚ÇÇ)) < 0
        y‚ÇÇ = -y‚ÇÇ
    end

    residue_y‚ÇÅ(a1, a2) = interval(2)*(a1*y‚ÇÅ^2 + a2)*(interval(4)*a1*y‚ÇÅ^2*(y‚ÇÅ^2 - y‚ÇÇ^2) - (a1*y‚ÇÅ^2 + a2)*(interval(5)*y‚ÇÅ^2 - y‚ÇÇ^2)) / (interval(2^3) * interval(2œÄ)^8 * ŒΩ^2 * y‚ÇÅ^3*(y‚ÇÅ^2 - y‚ÇÇ^2)^3)
    residue_y‚ÇÇ(a1, a2) = interval(2)*(a1*y‚ÇÇ^2 + a2)*(interval(4)*a1*y‚ÇÇ^2*(y‚ÇÇ^2 - y‚ÇÅ^2) - (a1*y‚ÇÇ^2 + a2)*(interval(5)*y‚ÇÇ^2 - y‚ÇÅ^2)) / (interval(2^3) * interval(2œÄ)^8 * ŒΩ^2 * y‚ÇÇ^3*(y‚ÇÇ^2 - y‚ÇÅ^2)*(y‚ÇÇ^2 - y‚ÇÅ^2)*(y‚ÇÇ^2 - y‚ÇÅ^2))
    
    # Compute the integrals
    resl11_1 = residue_y‚ÇÅ(-interval(2œÄ)^2*ŒΩ, ŒΩ‚ÇÅ)
    resl11_2 = residue_y‚ÇÇ(-interval(2œÄ)^2*ŒΩ, ŒΩ‚ÇÅ)

    int_l11_squared = interval(2œÄ*1im)*(resl11_1 + resl11_2)
    if inf(abs(imag(int_l11_squared))) == 0
        int_l11_squared = real(int_l11_squared)
    else
        error("Integral l11 has significant imaginary part")
    end

    resl12_1 = residue_y‚ÇÅ(interval(0), ŒΩ‚ÇÇ)
    resl12_2 = residue_y‚ÇÇ(interval(0), ŒΩ‚ÇÇ)

    int_l12_squared = interval(2œÄ*1im)*(resl12_1 + resl12_2)
    if inf(abs(imag(int_l12_squared))) == 0
        int_l12_squared = real(int_l12_squared)
    else
        error("Integral l12 has significant imaginary part")
    end

    resl21_1 = residue_y‚ÇÅ(interval(0), ŒΩ‚ÇÉ)
    resl21_2 = residue_y‚ÇÇ(interval(0), ŒΩ‚ÇÉ)

    int_l21_squared = interval(2œÄ*1im)*(resl21_1 + resl21_2)
    if inf(abs(imag(int_l21_squared))) == 0
        int_l21_squared = real(int_l21_squared)
    else
        error("Integral l21 has significant imaginary part")
    end

    resl22_1 = residue_y‚ÇÅ(-interval(2œÄ)^2, -ŒΩ‚ÇÇ)
    resl22_2 = residue_y‚ÇÇ(-interval(2œÄ)^2, -ŒΩ‚ÇÇ)

    int_l22_squared = interval(2œÄ*1im)*(resl22_1 + resl22_2)
    if inf(abs(imag(int_l22_squared))) == 0
        int_l22_squared = real(int_l22_squared)
    else
        error("Integral l22 has significant imaginary part")
    end

    return int_l11_squared, int_l12_squared, int_l21_squared, int_l22_squared
end

# This computes generally one of the four terms needed to compute ||ùìÅ‚Åª¬π||_‚Ñ≥‚ÇÅ
function _compute_‚Ñ≥‚ÇÅ_component(a‚ÇÅ,a‚ÇÇ,ŒΩ,ŒΩ‚ÇÅ,ŒΩ‚ÇÇ,ŒΩ‚ÇÉ,f_num,f_denom)
    f(Œæ) = f_num(Œæ)/f_denom(Œæ)
    b‚ÇÅ = ŒΩ
    b‚ÇÇ = ŒΩ*ŒΩ‚ÇÇ-ŒΩ‚ÇÅ
    b‚ÇÉ = -ŒΩ‚ÇÇ*(ŒΩ‚ÇÅ+ŒΩ‚ÇÉ)
    r‚ÇÅ,r‚ÇÇ = quad_roots(ExactReal(16)*interval(œÄ^4)*a‚ÇÅ*b‚ÇÅ,ExactReal(8)*interval(œÄ^2)*a‚ÇÇ*b‚ÇÅ,a‚ÇÇ*b‚ÇÇ - a‚ÇÅ*b‚ÇÉ)
    max_val = abs(f(interval(0)))
    if inf(r‚ÇÅ) > 0
        max_val = max(max_val,abs(f(sqrt(r‚ÇÅ))),abs(f(-sqrt(r‚ÇÅ))))
    end
    if inf(r‚ÇÇ) > 0
        max_val = max(max_val,abs(f(sqrt(r‚ÇÇ))),abs(f(-sqrt(r‚ÇÇ))))
    end
    return max_val
end

# Computes the constants C‚±º and a of Lemma 4.6.
function _compute_C_a(ŒΩi,ŒΩ‚ÇÅi,ŒΩ‚ÇÇi,ŒΩ‚ÇÉi)
    if sup((ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi)^2 + ExactReal(4)*ŒΩi*ŒΩ‚ÇÇi*(ŒΩ‚ÇÅi + ŒΩ‚ÇÉi)) < 0
        y = sqrt( (ŒΩ‚ÇÅi - ŒΩ‚ÇÇi*ŒΩi + interval(1im)*sqrt(-(ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi)*(ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi) - ExactReal(4)*ŒΩi*ŒΩ‚ÇÇi*(ŒΩ‚ÇÅi + ŒΩ‚ÇÉi))) /(ExactReal(2)*ŒΩi))*ExactReal(1)/interval(2œÄ)
        z‚ÇÅ = ExactReal(2œÄ)*interval(1im)*y
        z‚ÇÇ = ExactReal(-2œÄ)*interval(1im)*conj(y)
        if (sup(real(z‚ÇÅ)) < 0) & (sup(real(z‚ÇÇ)) < 0)
            z‚ÇÅ = -z‚ÇÅ
            z‚ÇÇ = -z‚ÇÇ 
        end
    elseif isstrictless(sqrt((ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi)*(ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi) + ExactReal(4)*ŒΩi*ŒΩ‚ÇÇi*(ŒΩ‚ÇÅi + ŒΩ‚ÇÉi)),  ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi)
        z‚ÇÅ = sqrt( (ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi + sqrt((ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi)*(ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi) + ExactReal(4)*ŒΩi*ŒΩ‚ÇÇi*(ŒΩ‚ÇÅi + ŒΩ‚ÇÉi))) / (ExactReal(2)*ŒΩi))
        z‚ÇÇ = sqrt( (ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi - sqrt((ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi)*(ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi) + ExactReal(4)*ŒΩi*ŒΩ‚ÇÇi*(ŒΩ‚ÇÅi + ŒΩ‚ÇÉi))) / (ExactReal(2)*ŒΩi))
    else
        error(`Assumption 1 is not satisfied`)
    end

    _Cj(d‚ÇÅ, d‚ÇÇ, ŒΩi, ŒΩ‚ÇÅi, ŒΩ‚ÇÇi, ŒΩ‚ÇÉi) = (abs(d‚ÇÅ*z‚ÇÇ) + abs(d‚ÇÇ / z‚ÇÇ)) / abs(ExactReal(2) * ŒΩi * (z‚ÇÅ*z‚ÇÅ - z‚ÇÇ*z‚ÇÇ))
    C1 = _Cj(ExactReal(-1), -ŒΩ‚ÇÇi, ŒΩi, ŒΩ‚ÇÅi, ŒΩ‚ÇÇi, ŒΩ‚ÇÉi)
    C2 = _Cj(interval(0), ŒΩ‚ÇÇi, ŒΩi, ŒΩ‚ÇÅi, ŒΩ‚ÇÇi, ŒΩ‚ÇÉi)
    C3 = _Cj(interval(0), ŒΩ‚ÇÉi, ŒΩi, ŒΩ‚ÇÅi, ŒΩ‚ÇÇi, ŒΩ‚ÇÉi)
    C4 = _Cj(-ŒΩi, ŒΩ‚ÇÅi, ŒΩi, ŒΩ‚ÇÅi, ŒΩ‚ÇÇi, ŒΩ‚ÇÉi)
    a = min(real(z‚ÇÅ), real(z‚ÇÇ))

    return a,C1,C2,C3,C4
end

# Checks the conditions of the Radii-Polynomial Theorem (see Section 3.1).
function CAP(ùí¥‚ÇÄ,ùíµ‚ÇÅ,ùíµ‚ÇÇ)
    if ùíµ‚ÇÅ > 1
        display("Z‚ÇÅ is too big")
        return ùíµ‚ÇÅ
    elseif 2ùí¥‚ÇÄ*ùíµ‚ÇÇ > (1-ùíµ‚ÇÅ)^2
        display("The condition 2ùí¥‚ÇÄ*ùíµ‚ÇÇ < (1-ùíµ‚ÇÅ)¬≤ is not satisfied")
        return ùí¥‚ÇÄ,ùíµ‚ÇÅ,ùíµ‚ÇÇ
    else
        display("The computer assisted proof was successful!")
        return ùí¥‚ÇÄ,ùíµ‚ÇÅ,ùíµ‚ÇÇ
    end
end

################### PROOF OF SOLUTIONS : MAIN CODE #################################################################################################################################################    
# Candidate Solution
#Glycolsis
UV = load("UV_Glycolsis","UV")
N‚ÇÄ = 1400
N = 1100
# Parameters
Œ¥ = 0.045 ; Œ¥i = interval(Œ¥)    
c = 1 ; ci = interval(c)
b = 0.44
d = 0.4
j = d
a = 0
h = 0 ; hi = interval(h)
r‚ÇÄ = interval(2e-7) # value of r‚ÇÄ for ùíµ‚ÇÇ
#=Brusselator
UV = load("UV_Brusselator","UV")
N‚ÇÄ = 3200
N = 1750
# Parameters
Œ¥ = 0.05 ; Œ¥i = interval(Œ¥)    
c = 1.51 ; ci = interval(c)
b = 0
d = 0
j = d
a = 0.3
h = c-1 ; hi = interval(h)
r‚ÇÄ = interval(8e-5) # value of r‚ÇÄ for ùíµ‚ÇÇ=#
#=Brusselator Multipulse
UV = load("UV_Brusselator_Multipulse","UV")
N‚ÇÄ = 2000
N = 1300
# Parameters
Œ¥ = 0.0095742405424 ; Œ¥i = interval(Œ¥)    
c = 2.3299999237 ; ci = interval(c)
b = 0
d = 0
j = d
a = 16.421100616
h = c-1 ; hi = interval(h)
r‚ÇÄ = interval(9e-11) # value of r‚ÇÄ for ùíµ‚ÇÇ=#
#=Root-Hair
UV = load("UV_RootHair","UV")
N‚ÇÄ = 300
N = 200
# Parameters
Œ¥ = 0.01 ; Œ¥i = interval(Œ¥)    
c = 2 ; ci = interval(c)
b = 1.8
d = 3.5
j = d
a = 0
h = 1 ; hi = interval(h)
r‚ÇÄ = interval(6e-7) # value of r‚ÇÄ for ùíµ‚ÇÇ=#
#=Schnakenberg
UV = load("UV_Schnakenberg","UV")
N‚ÇÄ = 1300
N = 850
# Parameters
Œ¥ = 0.011 ; Œ¥i = interval(Œ¥)    
c = 1 ; ci = interval(c)
b = 3.6
d = 0
j = d
a = 2.8
h = 0 ; hi = interval(h)
r‚ÇÄ = interval(3e-10) # value of r‚ÇÄ for ùíµ‚ÇÇ=#
#=Selkov-Schnakenberg
UV = load("UV_SelkovSchnakenberg","UV")
N‚ÇÄ = 4000
N = 3300
# Parameters
Œ¥ = 0.01 ; Œ¥i = interval(Œ¥) 
c = 1 ; ci = interval(c) 
b = 0.589818
d = 0.005
j = d
a = 1.095
h = 0 ; hi = interval(h)
r‚ÇÄ = interval(6e-10) # value of r‚ÇÄ for ùíµ‚ÇÇ=#

Œª‚ÇÅ = (a+b)/(c-h)
Œª‚ÇÇ = (c*Œª‚ÇÅ - a)/(Œª‚ÇÅ^2 + d)

ŒΩ = Œ¥^2 ; ŒΩi = interval(ŒΩ)
ŒΩ‚ÇÅ = 2Œª‚ÇÅ*Œª‚ÇÇ - c ; ŒΩ‚ÇÅi = interval(ŒΩ‚ÇÅ)
ŒΩ‚ÇÇ = d + Œª‚ÇÅ^2 ; ŒΩ‚ÇÇi = interval(ŒΩ‚ÇÇ)
ŒΩ‚ÇÉ = h - 2Œª‚ÇÅ*Œª‚ÇÇ ; ŒΩ‚ÇÉi = interval(ŒΩ‚ÇÉ)
ŒΩ‚ÇÑ = Œª‚ÇÇ; ŒΩ‚ÇÑi = interval(ŒΩ‚ÇÑ)
ŒΩ‚ÇÖ = 2Œª‚ÇÅ ; ŒΩ‚ÇÖi = interval(ŒΩ‚ÇÖ)

U = component(UV, 1)
V = component(UV, 2)

# Change of variables
U‚ÇÅ = U - Œª‚ÇÅ
U‚ÇÇ = V - Œª‚ÇÇ
d = œÄ / (frequency(U)) ; di = interval(d) # Domain size
fouriero = CosFourier(N,œÄ/d) 
fourier = CosFourier(N, œÄ/di) # Fourier basis
fourier0 = CosFourier(N‚ÇÄ,œÄ/di)
ùí´ = LinearOperator(fourier0,fourier0,interval.(trace2(N‚ÇÄ)))

# Computing the trace discussed in Section 3.2.
UÃÑ‚ÇÅ_interval = Sequence(fourier0, coefficients(ùí´)*interval.(coefficients(U‚ÇÅ)))
UÃÑ‚ÇÇ_interval = Sequence(fourier0, coefficients(ùí´)*interval.(coefficients(U‚ÇÇ)))
UÃÑ_interval = Sequence(fourier0^2, [UÃÑ‚ÇÅ_interval[:] ; UÃÑ‚ÇÇ_interval[:]])

# Building the Linear Operator l defined in Section 1.2.
@info "Building the Linear Operator"
l‚ÇÅ‚ÇÅ = diag(coefficients(project(Derivative(2), fourier, fourier,Interval{Float64})*ŒΩi + UniformScaling(interval(1)) * ŒΩ‚ÇÅi))
l‚ÇÅ‚ÇÇ = interval.(ones(N+1))*ŒΩ‚ÇÇi
l‚ÇÇ‚ÇÅ = interval.(ones(N+1))*ŒΩ‚ÇÉi
l‚ÇÇ‚ÇÇ = diag(coefficients(project(Derivative(2), fourier, fourier,Interval{Float64}) - UniformScaling(interval(1)) * ŒΩ‚ÇÇi))
l_den = l‚ÇÅ‚ÇÅ.*l‚ÇÇ‚ÇÇ - l‚ÇÇ‚ÇÅ.*l‚ÇÅ‚ÇÇ

# Computation of B defined in Section 3.3.
@info "Building the B operator"
V‚ÇÅ_interval = ExactReal(2)*UÃÑ‚ÇÅ_interval*UÃÑ‚ÇÇ_interval + ExactReal(2)*ŒΩ‚ÇÑi*UÃÑ‚ÇÅ_interval + ŒΩ‚ÇÖi*UÃÑ‚ÇÇ_interval
V‚ÇÇ_interval = UÃÑ‚ÇÅ_interval^2 + ŒΩ‚ÇÖi*UÃÑ‚ÇÅ_interval
Dg‚ÇÅ‚ÇÅ = project(Multiplication(V‚ÇÅ_interval) ,fourier, fourier, Interval{Float64})
Dg‚ÇÅ‚ÇÇ = project(Multiplication(V‚ÇÇ_interval) ,fourier, fourier, Interval{Float64})

M = LinearOperator(fourier^2, fourier^2, interval.(zeros(2*(N+1),2*(N+1))))
project!(component(M, 1, 1), UniformScaling(interval(1)) + Dg‚ÇÅ‚ÇÅ.*(l‚ÇÇ‚ÇÇ./l_den)' - Dg‚ÇÅ‚ÇÇ.*(l‚ÇÇ‚ÇÅ./l_den)')
project!(component(M, 1, 2), -Dg‚ÇÅ‚ÇÅ.*(l‚ÇÅ‚ÇÇ./l_den)' + Dg‚ÇÅ‚ÇÇ.*(l‚ÇÅ‚ÇÅ./l_den)')
project!(component(M, 2, 1), -Dg‚ÇÅ‚ÇÅ.*(l‚ÇÇ‚ÇÇ./l_den)' + Dg‚ÇÅ‚ÇÇ.*(l‚ÇÇ‚ÇÅ./l_den)')
project!(component(M, 2, 2), UniformScaling(interval(1)) + Dg‚ÇÅ‚ÇÅ.*(l‚ÇÅ‚ÇÇ./l_den)' - Dg‚ÇÅ‚ÇÇ.*(l‚ÇÅ‚ÇÅ./l_den)')

B = interval.(inv(mid.(M)))

################## ùí¥‚ÇÄ BOUND ######################################################
@info "Computing ùí¥‚ÇÄ"
# Computation of the ùí¥‚ÇÄ bound, defined in Lemma 4.2.
# Building G‚ÇÅ
tail_G‚ÇÅ = UÃÑ‚ÇÅ_interval^2*UÃÑ‚ÇÇ_interval + ŒΩ‚ÇÑi*UÃÑ‚ÇÅ_interval^2 + ŒΩ‚ÇÖi*UÃÑ‚ÇÅ_interval*UÃÑ‚ÇÇ_interval
G‚ÇÅ = project(tail_G‚ÇÅ, fourier)
G = Sequence(fourier^2, interval.(zeros(2*(N+1))))
project!(component(G, 1), G‚ÇÅ)
project!(component(G, 2), -G‚ÇÅ)
tail_G = Sequence(CosFourier(3N‚ÇÄ,œÄ/di)^2, interval.(zeros(2*(3N‚ÇÄ+1))))
project!(component(tail_G,1), tail_G‚ÇÅ)
project!(component(tail_G,2), -tail_G‚ÇÅ)

lUÃÑ = Sequence(fourier^2, interval.(zeros(2*(N+1))))
project!(component(lUÃÑ, 1), Derivative(2)*UÃÑ‚ÇÅ_interval*ŒΩi + ŒΩ‚ÇÅi*UÃÑ‚ÇÅ_interval + ŒΩ‚ÇÇi*UÃÑ‚ÇÇ_interval)
project!(component(lUÃÑ, 2), ŒΩ‚ÇÉi*UÃÑ‚ÇÅ_interval + Derivative(2)*UÃÑ‚ÇÇ_interval - ŒΩ‚ÇÇi*UÃÑ‚ÇÇ_interval)
UÃÑ‚ÇÅ·¥∫_interval = project(UÃÑ‚ÇÅ_interval,fourier)
UÃÑ‚ÇÇ·¥∫_interval = project(UÃÑ‚ÇÇ_interval,fourier)
lUÃÑ_minus_UÃÑ·¥∫ = Sequence(fourier0^2, interval.(zeros(2*(N‚ÇÄ+1))))
project!(component(lUÃÑ_minus_UÃÑ·¥∫, 1), Derivative(2)*(UÃÑ‚ÇÅ_interval-UÃÑ‚ÇÅ·¥∫_interval)*ŒΩi + ŒΩ‚ÇÅi*(UÃÑ‚ÇÅ_interval-UÃÑ‚ÇÅ·¥∫_interval) + ŒΩ‚ÇÇi*(UÃÑ‚ÇÇ_interval-UÃÑ‚ÇÇ·¥∫_interval))
project!(component(lUÃÑ_minus_UÃÑ·¥∫, 2), ŒΩ‚ÇÉi*(UÃÑ‚ÇÅ_interval-UÃÑ‚ÇÅ·¥∫_interval) + Derivative(2)*(UÃÑ‚ÇÇ_interval-UÃÑ‚ÇÇ·¥∫_interval) - ŒΩ‚ÇÇi*(UÃÑ‚ÇÇ_interval-UÃÑ‚ÇÇ·¥∫_interval))
ùí¥‚ÇÄ = sqrt(ExactReal(2)*di) * sqrt(norm(B*(lUÃÑ + G),2)^2 + norm(lUÃÑ_minus_UÃÑ·¥∫ + tail_G - G, 2)^2)
@show ùí¥‚ÇÄ

################## ùíµ‚ÇÇ BOUND ######################################################
@info "Computing ùíµ‚ÇÇ"    
# Computation of the ùíµ‚ÇÇ bound, defined in Lemma 4.3.
Q‚ÇÅ = ExactReal(2)*UÃÑ‚ÇÇ_interval + ExactReal(2)*ŒΩ‚ÇÑi
Q‚ÇÇ = ExactReal(2)*UÃÑ‚ÇÅ_interval + ŒΩ‚ÇÖi
Q‚ÇÅ¬≤ = Q‚ÇÅ*Q‚ÇÅ
Q‚ÇÇ¬≤ = Q‚ÇÇ*Q‚ÇÇ
‚Ñö‚ÇÅ = project(Multiplication(Q‚ÇÅ), fourier, fourier)
‚Ñö‚ÇÇ = project(Multiplication(Q‚ÇÇ), fourier, fourier)
‚Ñö‚ÇÅ¬≤ = project(Multiplication(Q‚ÇÅ¬≤), fourier, fourier)
‚Ñö‚ÇÇ¬≤ = project(Multiplication(Q‚ÇÇ¬≤), fourier, fourier)
B‚ÇÅ‚ÇÅ = component(B, 1, 1)
B‚ÇÅ‚ÇÇ = component(B, 1, 2)
B‚ÇÇ‚ÇÅ = component(B, 2, 1)
B‚ÇÇ‚ÇÇ = component(B, 2, 2)
BM = LinearOperator(fourier, fourier^2, [coefficients(B‚ÇÅ‚ÇÅ - B‚ÇÅ‚ÇÇ) ; coefficients(B‚ÇÇ‚ÇÅ - B‚ÇÇ‚ÇÇ)])
BM_adjoint = LinearOperator(fourier^2, fourier, coefficients(BM)')

# We create a P operator that allows us to compute the operator norm in CosFourier
P = interval.(sqrt(2)*(vec(ones(N+1, 1))))
P[1,1] = interval(1)
P‚Åª¬π = (interval.(ones(N+1))./P)

norm_BM = sqrt(opnorm(LinearOperator(coefficients(P.*_matprod2(BM_adjoint,BM).*P‚Åª¬π')), 2))

# Computing Œ∫
l_den2(Œæ) = ŒΩi*abs(interval(2œÄ)*Œæ)^4 + (ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi)*abs(interval(2œÄ)*Œæ)^2 - ŒΩ‚ÇÇi*(ŒΩ‚ÇÅi+ŒΩ‚ÇÉi)
l‚ÇÅ‚ÇÅ2(Œæ) = -abs(interval(2œÄ)*Œæ)^2*ŒΩi + ŒΩ‚ÇÅi
l‚ÇÅ‚ÇÇ2(Œæ) = ŒΩ‚ÇÇi
l‚ÇÇ‚ÇÅ2(Œæ) = ŒΩ‚ÇÉi
l‚ÇÇ‚ÇÇ2(Œæ) = -abs(interval(2œÄ)*Œæ)^2 - ŒΩ‚ÇÇi

# Computing the bound on ||l‚Åª¬π||_‚Ñ≥‚ÇÅ
norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_1_1 = _compute_‚Ñ≥‚ÇÅ_component(ExactReal(-1),-ŒΩ‚ÇÇi,ŒΩi,ŒΩ‚ÇÅi,ŒΩ‚ÇÇi,ŒΩ‚ÇÉi,l‚ÇÇ‚ÇÇ2,l_den2)
norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_1_2 = max(abs(ŒΩ‚ÇÇi/l_den2(interval(0))),abs(ŒΩ‚ÇÇi/l_den2(cbrt(interval(8)*interval(œÄ^2)*(ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi)/(interval(64)*interval(œÄ^4))))))
norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_2_1 = max(abs(ŒΩ‚ÇÉi/l_den2(interval(0))),abs(ŒΩ‚ÇÉi/l_den2(cbrt(interval(8)*interval(œÄ^2)*(ŒΩi*ŒΩ‚ÇÇi - ŒΩ‚ÇÅi)/(interval(64)*interval(œÄ^4))))))
norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_2_2 = _compute_‚Ñ≥‚ÇÅ_component(-ŒΩi,ŒΩ‚ÇÅi,ŒΩi,ŒΩ‚ÇÅi,ŒΩ‚ÇÇi,ŒΩ‚ÇÉi,l‚ÇÅ‚ÇÅ2,l_den2)
norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π = sqrt(norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_1_1^2 + norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_1_2^2 + norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_2_1^2 + norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_2_2^2)
# Computing the bound on |l‚Åª¬π|‚Çò‚ÇÇ
_val_1_squared,_val_2_squared,_val_3_squared,_val_4_squared = integral_computation(ŒΩi,ŒΩ‚ÇÅi,ŒΩ‚ÇÇi,ŒΩ‚ÇÉi)
norm_‚Ñ≥‚ÇÇ_ùìÅ‚Åª¬π = maximum([sqrt(_val_1_squared + _val_2_squared) sqrt(_val_3_squared + _val_4_squared)])

Œ∫ = norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π * norm_‚Ñ≥‚ÇÇ_ùìÅ‚Åª¬π

ùíµ‚ÇÇ‚ÇÅ = opnorm(LinearOperator([P ; P].*coefficients(_matprod2(_matprod2(BM,(‚Ñö‚ÇÅ¬≤ + ‚Ñö‚ÇÇ¬≤)),BM_adjoint)).*[P‚Åª¬π ; P‚Åª¬π]'), 2)
ùíµ‚ÇÇ‚ÇÇ = sqrt(opnorm(LinearOperator([P ; P].*coefficients(_matprod2(_matprod2(BM,(‚Ñö‚ÇÅ¬≤ + ‚Ñö‚ÇÇ¬≤) - (_matprod2(‚Ñö‚ÇÅ,‚Ñö‚ÇÅ) + _matprod2(‚Ñö‚ÇÇ,‚Ñö‚ÇÇ))),BM_adjoint)).*[P‚Åª¬π ; P‚Åª¬π]'),2))
ùíµ‚ÇÇ‚ÇÉ = norm(Q‚ÇÅ¬≤ + Q‚ÇÇ¬≤, 1)

ùíµ‚ÇÇ = sqrt(œÜ(ùíµ‚ÇÇ‚ÇÅ, ùíµ‚ÇÇ‚ÇÇ, ùíµ‚ÇÇ‚ÇÇ, ùíµ‚ÇÇ‚ÇÉ))*sqrt(interval(5))*Œ∫ + norm_BM*ExactReal(3)*Œ∫*norm_‚Ñ≥‚ÇÇ_ùìÅ‚Åª¬π*r‚ÇÄ
@show ùíµ‚ÇÇ
################## ùíµ‚ÇÅ BOUND ######################################################
@info "Computing Z‚ÇÅ"   
# Computation of Z‚ÇÅ, defined in Lemma 4.5
V‚ÇÅ·¥∫_interval = project(V‚ÇÅ_interval,CosFourier(N,œÄ/di))
V‚ÇÇ·¥∫_interval = project(V‚ÇÇ_interval,CosFourier(N,œÄ/di))

l‚ÇÅ‚ÇÅ2N = -(interval.(2N+1)*œÄ/di)^2*ŒΩi + ŒΩ‚ÇÅi
l‚ÇÅ‚ÇÇ2N = ŒΩ‚ÇÇi
l‚ÇÇ‚ÇÅ2N = ŒΩ‚ÇÉi
l‚ÇÇ‚ÇÇ2N = -(interval.(2N+1)*œÄ/di)^2 - ŒΩ‚ÇÇi
l_den2N = l‚ÇÅ‚ÇÅ2N*l‚ÇÇ‚ÇÇ2N - l‚ÇÅ‚ÇÇ2N*l‚ÇÇ‚ÇÅ2N

Z‚ÇÅ‚ÇÅ = abs(l‚ÇÇ‚ÇÇ2N/l_den2N) * norm(V‚ÇÅ·¥∫_interval,1) + abs(l‚ÇÇ‚ÇÅ2N/l_den2N) * norm(V‚ÇÇ·¥∫_interval,1)
Z‚ÇÅ‚ÇÇ = abs(l‚ÇÅ‚ÇÇ2N/l_den2N) * norm(V‚ÇÅ·¥∫_interval,1) + abs(l‚ÇÅ‚ÇÅ2N/l_den2N) * norm(V‚ÇÇ·¥∫_interval,1)

fourier2 = CosFourier(2N,œÄ/di)
fourier3 = CosFourier(3N,œÄ/di)

M_2N_3N = LinearOperator(fourier2^2, fourier3^2, interval.(zeros(2*(3N+1),2*(2N+1))))
l‚ÇÅ‚ÇÅ_2N = diag(coefficients(project(Derivative(2), fourier2, fourier2,Interval{Float64})*ŒΩi + UniformScaling(interval(1)) * ŒΩ‚ÇÅi))
l‚ÇÅ‚ÇÇ_2N = interval.(ones(2N+1))*ŒΩ‚ÇÇi
l‚ÇÇ‚ÇÅ_2N = interval.(ones(2N+1))*ŒΩ‚ÇÉi
l‚ÇÇ‚ÇÇ_2N = diag(coefficients(project(Derivative(2), fourier2, fourier2,Interval{Float64}) - UniformScaling(interval(1)) * ŒΩ‚ÇÇi)) 
l_den_2N = l‚ÇÅ‚ÇÅ_2N.*l‚ÇÇ‚ÇÇ_2N - l‚ÇÇ‚ÇÅ_2N.*l‚ÇÅ‚ÇÇ_2N

ùïç‚ÇÅ·¥∫_2N_3N = project(Multiplication(V‚ÇÅ·¥∫_interval),fourier2,fourier3,Interval{Float64})
ùïç‚ÇÇ·¥∫_2N_3N = project(Multiplication(V‚ÇÇ·¥∫_interval),fourier2,fourier3,Interval{Float64})
project!(component(M_2N_3N, 1, 1), UniformScaling(interval(1)) + ùïç‚ÇÅ·¥∫_2N_3N.*(l‚ÇÇ‚ÇÇ_2N./l_den_2N)' - ùïç‚ÇÇ·¥∫_2N_3N.*(l‚ÇÇ‚ÇÅ_2N./l_den_2N)')
project!(component(M_2N_3N, 1, 2), -ùïç‚ÇÅ·¥∫_2N_3N.*(l‚ÇÅ‚ÇÇ_2N./l_den_2N)' + ùïç‚ÇÇ·¥∫_2N_3N.*(l‚ÇÅ‚ÇÅ_2N./l_den_2N)')
project!(component(M_2N_3N, 2, 1), -ùïç‚ÇÅ·¥∫_2N_3N.*(l‚ÇÇ‚ÇÇ_2N./l_den_2N)' + ùïç‚ÇÇ·¥∫_2N_3N.*(l‚ÇÇ‚ÇÅ_2N./l_den_2N)')
project!(component(M_2N_3N, 2, 2), UniformScaling(interval(1)) + ùïç‚ÇÅ·¥∫_2N_3N.*(l‚ÇÅ‚ÇÇ_2N./l_den_2N)' - ùïç‚ÇÇ·¥∫_2N_3N.*(l‚ÇÅ‚ÇÅ_2N./l_den_2N)')

B_3N = project(B,fourier3^2,fourier3^2)
component(B_3N,1,1)[N+1:end,N+1:end] .= Diagonal(interval.(ones(2N)))
component(B_3N,2,2)[N+1:end,N+1:end] .= Diagonal(interval.(ones(2N)))

P_2N = interval.(sqrt(2)*(vec(ones(2N+1, 1))))
P_2N[1,1] = interval(1)
P_2N‚Åª¬π = (interval.(ones(2N+1))./P_2N)
P_3N = interval.(sqrt(2)*(vec(ones(3N+1, 1))))
P_3N[1,1] = interval(1)

Z‚ÇÄ = opnorm(LinearOperator(coefficients([P_3N ; P_3N].*(UniformScaling(interval(1)) - _matprod2(B_3N,M_2N_3N)).*[P_2N‚Åª¬π ; P_2N‚Åª¬π]')),2)

Z‚ÇÅ = sqrt(Z‚ÇÄ^2 + ExactReal(2)*Z‚ÇÅ‚ÇÅ^2 + ExactReal(2)*Z‚ÇÅ‚ÇÇ^2)
@show Z‚ÇÅ
@info "Computing ùíµ·µ§"   
# Computation of ùíµ·µ§, defined in Lemma 4.8
# Computing the constants C‚±º and a defined in Lemma 4.6.
a,C‚ÇÅ,C‚ÇÇ,C‚ÇÉ,C‚ÇÑ = _compute_C_a(ŒΩi,ŒΩ‚ÇÅi,ŒΩ‚ÇÇi,ŒΩ‚ÇÉi)

# Building the Fourier series of E.
E = Sequence(CosFourier(2N,œÄ/di), interval.(zeros(2N+1)))
for n = 0:2N
    E[n] = ExactReal(2)*a* (interval(-1))^interval(n)/(ExactReal(4)*a^2 + (interval(n*œÄ)/di)^2)
end

Cd = ExactReal(4)*di + ExactReal(4)*exp(-a*di)/(a*(ExactReal(1)-exp(-interval(3/2)*a*di))) + ExactReal(2)/(a*(ExactReal(1)-exp(-ExactReal(2)*a*di)))

# Computing the inner products.
EV‚ÇÅ·¥∫ = _conv_small(E,V‚ÇÅ·¥∫_interval,N)
EV‚ÇÇ·¥∫ = _conv_small(E,V‚ÇÇ·¥∫_interval,N)
V‚ÇÅ·¥∫_inner_prodEV‚ÇÅ·¥∫ = abs(coefficients(P.*V‚ÇÅ·¥∫_interval)'*coefficients(P.*EV‚ÇÅ·¥∫))
V‚ÇÇ·¥∫_inner_prodEV‚ÇÇ·¥∫ = abs(coefficients(P.*V‚ÇÇ·¥∫_interval)'*coefficients(P.*EV‚ÇÇ·¥∫))

ùíµ·µ§‚ÇÅ‚ÇÅ = sqrt(C‚ÇÅ^2*(ExactReal(1)-exp(-ExactReal(4)*a*di))/a * V‚ÇÅ·¥∫_inner_prodEV‚ÇÅ·¥∫)
ùíµ·µ§‚ÇÅ‚ÇÇ = sqrt(C‚ÇÇ^2*(ExactReal(1)-exp(-ExactReal(4)*a*di))/a * V‚ÇÇ·¥∫_inner_prodEV‚ÇÇ·¥∫)
ùíµ·µ§‚ÇÅ‚ÇÉ = sqrt(C‚ÇÉ^2*(ExactReal(1)-exp(-ExactReal(4)*a*di))/a * V‚ÇÅ·¥∫_inner_prodEV‚ÇÅ·¥∫)
ùíµ·µ§‚ÇÅ‚ÇÑ = sqrt(C‚ÇÑ^2*(ExactReal(1)-exp(-ExactReal(4)*a*di))/a * V‚ÇÇ·¥∫_inner_prodEV‚ÇÇ·¥∫)
ùíµ·µ§‚ÇÅ = sqrt((ùíµ·µ§‚ÇÅ‚ÇÅ + ùíµ·µ§‚ÇÅ‚ÇÇ)^2 + (ùíµ·µ§‚ÇÅ‚ÇÉ + ùíµ·µ§‚ÇÅ‚ÇÑ)^2)

ùíµ·µ§‚ÇÇ‚ÇÅ = sqrt(ùíµ·µ§‚ÇÅ‚ÇÅ^2 + Cd*C‚ÇÅ^2*(exp(-ExactReal(2)*a*di)-exp(-ExactReal(6)*a*di))*V‚ÇÅ·¥∫_inner_prodEV‚ÇÅ·¥∫)
ùíµ·µ§‚ÇÇ‚ÇÇ = sqrt(ùíµ·µ§‚ÇÅ‚ÇÇ^2 + Cd*C‚ÇÇ^2*(exp(-ExactReal(2)*a*di)-exp(-ExactReal(6)*a*di))*V‚ÇÇ·¥∫_inner_prodEV‚ÇÇ·¥∫)
ùíµ·µ§‚ÇÇ‚ÇÉ = sqrt(ùíµ·µ§‚ÇÅ‚ÇÉ^2 + Cd*C‚ÇÉ^2*(exp(-ExactReal(2)*a*di)-exp(-ExactReal(6)*a*di))*V‚ÇÅ·¥∫_inner_prodEV‚ÇÅ·¥∫)
ùíµ·µ§‚ÇÇ‚ÇÑ = sqrt(ùíµ·µ§‚ÇÅ‚ÇÑ^2 + Cd*C‚ÇÑ^2*(exp(-ExactReal(2)*a*di)-exp(-ExactReal(6)*a*di))*V‚ÇÇ·¥∫_inner_prodEV‚ÇÇ·¥∫)
ùíµ·µ§‚ÇÇ = sqrt((ùíµ·µ§‚ÇÇ‚ÇÅ + ùíµ·µ§‚ÇÇ‚ÇÇ)^2 + (ùíµ·µ§‚ÇÇ‚ÇÉ + ùíµ·µ§‚ÇÇ‚ÇÑ)^2)

ùíµ·µ§ = sqrt(interval(2))*norm_BM*sqrt(ùíµ·µ§‚ÇÅ^2 + ùíµ·µ§‚ÇÇ^2)
@show ùíµ·µ§

l‚Åª¬π_norm = œÜ(norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_1_1, norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_1_2, norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_2_1, norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π_component_2_2)

ùíµ‚ÇÅ = Z‚ÇÅ + ùíµ·µ§ + norm_BM*l‚Åª¬π_norm*sqrt(norm(V‚ÇÅ·¥∫_interval - V‚ÇÅ_interval,1)^2 + norm(V‚ÇÇ·¥∫_interval - V‚ÇÇ_interval,1)^2)

################## Computer Assisted Proof ######################################################
ùí¥‚ÇÄ = interval(sup(ùí¥‚ÇÄ))
ùíµ‚ÇÅ = interval(sup(ùíµ‚ÇÅ))
ùíµ‚ÇÇ = interval(sup(ùíµ‚ÇÇ))
r_min = sup((interval(1) - ùíµ‚ÇÅ - sqrt((interval(1) - ùíµ‚ÇÅ)^2 - interval(2)*ùí¥‚ÇÄ*ùíµ‚ÇÇ))/ùíµ‚ÇÇ)
r_max = inf((interval(1) - ùíµ‚ÇÅ + sqrt((interval(1) - ùíµ‚ÇÅ)^2 - interval(2)*ùí¥‚ÇÄ*ùíµ‚ÇÇ))/ùíµ‚ÇÇ)
CAP(sup(ùí¥‚ÇÄ),sup(ùíµ‚ÇÅ),sup(ùíµ‚ÇÇ))

r0 = r_min # radius of the ball in which the proof is done








############## Stability analysis ######################################################
# Proves the results of Theorems 6.7 and 6.8. 
# Note that these theorems are for Glycolsis and Root-Hair.
@info "Starting the enclosure of the spectrum"

    t = - interval(1) # precomputed shift for the spectrum to the left half-plane. This is done by computing the Gershgorin disks a first time with a rough shift (given in Lemma 6.3). Then we notice that t = -1 is a good shift for all the examples treated in the paper.

    l11 = diag(coefficients(project(Derivative(2), fourier, fourier,Interval{Float64})*ŒΩi + UniformScaling(interval(1)) * ŒΩ‚ÇÅi))
    l12 = interval.(ones(N+1))*ŒΩ‚ÇÇi
    l21 = interval.(ones(N+1))*ŒΩ‚ÇÉi
    l22 = diag(coefficients(project(Derivative(2), fourier, fourier,Interval{Float64}) - UniformScaling(interval(1)) * ŒΩ‚ÇÇi))
    l_den = l11.*l22 - l21.*l12
    
    L = LinearOperator(fourier^2, fourier^2, interval.(zeros(2*(N+1),2*(N+1))))
    component(L, 1, 1) .= Diagonal(l11)
    component(L, 1, 2) .= Diagonal(l12)
    component(L, 2, 1) .= Diagonal(l21)
    component(L, 2, 2) .= Diagonal(l22)


    # Computation of DF
    
    V‚ÇÅ_interval = ExactReal(2)*UÃÑ‚ÇÅ_interval*UÃÑ‚ÇÇ_interval + ExactReal(2)*ŒΩ‚ÇÑi*UÃÑ‚ÇÅ_interval + ŒΩ‚ÇÖi*UÃÑ‚ÇÇ_interval
    V‚ÇÇ_interval = UÃÑ‚ÇÅ_interval^2 + ŒΩ‚ÇÖi*UÃÑ‚ÇÅ_interval
    Dg‚ÇÅ‚ÇÅ = project(Multiplication(V‚ÇÅ_interval) ,fourier, fourier, Interval{Float64})
    Dg‚ÇÅ‚ÇÇ = project(Multiplication(V‚ÇÇ_interval) ,fourier, fourier, Interval{Float64})

    DF = LinearOperator(fourier^2, fourier^2, interval.(zeros(2*(N+1),2*(N+1))))
    component(DF, 1, 1) .=  coefficients(Dg‚ÇÅ‚ÇÅ)
    component(DF, 1, 2) .=  coefficients(Dg‚ÇÅ‚ÇÇ)
    component(DF, 2, 1) .=  -coefficients(Dg‚ÇÅ‚ÇÅ)
    component(DF, 2, 2) .=  -coefficients(Dg‚ÇÅ‚ÇÇ)

    D1 = sqrt(interval(2))*interval.(ones(2*(N+1))) ; D2 = interval.(ones(2*(N+1)))*sqrt(interval(0.5))
    D1[1] = interval(1); D1[N+2] = interval(1) ; D2[1] = interval(1); D2[N+2] = interval(1) 

    DF = DF + L

    D,P =  eigen(-mid.(D1).*coefficients(mid.(DF)).*mid.(D2)')

    P = interval.(mid.(D2).*P.*mid.(D1)') ; Pinv = interval.(inv(mid.(P))) ; nP = opnorm(LinearOperator(I - D1.*_cmatprod(Pinv,P).*D2'),2)
    norm_P = spec_norm(D1.*P.*D2') ; norm_Pinv = spec_norm(D1.*Pinv.*D2')  

    # display("norm of Pinv")
    # display(norm_Pinv)

    D = _cmatprod(_cmatprod(Pinv,coefficients(DF)),P)  ; DF = Nothing
    S = diag(D) ; R = D
    for i ‚àà 1:2*(N+1)
        R[i,i] = interval(0)
    end 

    St = S .+ t ;  Stinv = ExactReal(1) ./ St 
    V1 = V‚ÇÅ_interval
    V2 = V‚ÇÇ_interval

    ### computation of \|œÄ_N (L-Œ¥0)^{-1}\|_2. For this we compute the eigenvalues of l^{-1}(Œæ) and evaluate the maximum for Œæ \geq (N+1)œÄ/d 
    lden = (ŒΩ‚ÇÅ - ŒΩ*(interval(N+1)*œÄ/di)^2)*( -ŒΩ‚ÇÇ - (interval(N+1)*œÄ/di)^2) - ŒΩ‚ÇÉ*ŒΩ‚ÇÇ
    a1 = ( -ŒΩ‚ÇÇ - (interval(N+1)*œÄ/di)^2 + V1[0])/lden
    a2 = (-ŒΩ‚ÇÇ + V2[0])/lden
    a3 = (-ŒΩ‚ÇÉ-V1[0])/lden
    a4 = (ŒΩ‚ÇÅ - ŒΩ*(interval(N+1)*œÄ/di)^2 - V2[0])/lden 

    ### formula for the eigenvalues of a matrix [a1 a2;a3 a4]
    max_Linv = abs(ExactReal(0.5)*(a1 + a4 + sqrt(interval(4)*a2*a3 + (a1-a4)^2))) 

    Z12 = max_Linv*sqrt(interval(2)*norm(V1-V1[0],1)^2 + interval(2)*norm(V2-V2[0],1)^2)
    # display("Z12")
    # display(Z12)

    Z13 = spec_norm((D1.*Stinv).*R.*D2')*(ExactReal(1)+ nP*norm_Pinv/(ExactReal(1)-nP))
    # display("Z13")
    # display(Z13)

    DF = LinearOperator(CosFourier(3N,œÄ/di)^2, fourier^2, interval.(zeros(2*(N+1),2*(3N+1))))
    Dg‚ÇÅ‚ÇÅ = project(Multiplication(V‚ÇÅ_interval) ,CosFourier(3N,œÄ/di) , fourier, Interval{Float64})
    Dg‚ÇÅ‚ÇÇ = project(Multiplication(V‚ÇÇ_interval) ,CosFourier(3N,œÄ/di) , fourier, Interval{Float64})
    component(DF, 1, 1) .=  coefficients(Dg‚ÇÅ‚ÇÅ)
    component(DF, 1, 2) .=  coefficients(Dg‚ÇÅ‚ÇÇ)
    component(DF, 2, 1) .=  -coefficients(Dg‚ÇÅ‚ÇÅ)
    component(DF, 2, 2) .=  -coefficients(Dg‚ÇÅ‚ÇÇ)
    DF = coefficients(DF)  ; DF = DF[:,[N+2:3*N+1 ; 4N+3:6N+2]]
    DF = Stinv.*DF
    

    Z14 = sqrt(interval(0.5))*spec_norm(D1.*Matrix(DF))*(ExactReal(1)+ nP*norm_Pinv/(ExactReal(1)-nP))
    # display("Z14")
    # display(Z14)


    DF = LinearOperator(fourier^2, fourier^2, interval.(zeros(2*(N+1),2*(N+1))))
    Dg‚ÇÅ‚ÇÅ = project(Multiplication(V1^2 + V2^2) , fourier , fourier, Interval{Float64})
    
    component(DF, 1, 1) .=  coefficients(Dg‚ÇÅ‚ÇÅ)
    component(DF, 1, 2) .=  -coefficients(Dg‚ÇÅ‚ÇÅ)
    component(DF, 2, 1) .=  -coefficients(Dg‚ÇÅ‚ÇÅ)
    component(DF, 2, 2) .=  coefficients(Dg‚ÇÅ‚ÇÅ)
    Z11 = max_Linv*sqrt(spec_norm(D1.*_cmatprod(_cmatprod(Matrix(P'),coefficients(DF)),P).*D2'))
    # display("Z11")
    # display(Z11)

    
    ###### Computation of the bounds ùíû1*r0 an ùíû2*r0

    norm_SPL = spec_norm((D1.*Stinv).*Pinv.*D2')*(ExactReal(1)+ nP*norm_Pinv/(ExactReal(1)-nP))

    # display("value norm SPL")
    # display(norm_SPL)

    ùíµ23 = sqrt(ùíµ‚ÇÇ‚ÇÉ) ; 

    ùíû1 = norm_‚Ñ≥‚ÇÅ_ùìÅ‚Åª¬π*(sqrt(interval(5))*Œ∫*ùíµ23 + interval(3)*norm_‚Ñ≥‚ÇÇ_ùìÅ‚Åª¬π*r0)*r0
    ùíû2 = norm_SPL*(sqrt(interval(5))*Œ∫*ùíµ23 + interval(3)*norm_‚Ñ≥‚ÇÇ_ùìÅ‚Åª¬π*r0)*r0

    # display("values of the ùíûi")
    # display(ùíû1)
    # display(ùíû2)

    ########## Computation of the bound ùíµu3

    ùíµu1 = ùíµ·µ§‚ÇÅ
    ùíµu2 = ùíµ·µ§‚ÇÇ
    ùíµu3 = norm_SPL*ùíµu2

    # display("value of ùíµu3")
    # display(ùíµu3)

    ######### Computation of œµ


    if sup(ùíû1)<1
        Œ∫1 = (ùíµu1 + ùíû1)/(ExactReal(1)-ùíû1)
        # display("Œ∫1")
        # display(Œ∫1)
        if sup(Z12 + ùíµu2 + sqrt(ExactReal(1) + Œ∫1^2)*ùíû1) < 1
            if sup(Z12 + ùíµu2) < 1
                Œ∫2 = (Z11 + (ùíµu2 + sqrt(ExactReal(1) + Œ∫1^2)*ùíû1)*norm_P)/(ExactReal(1) - (Z12 + ùíµu2 + sqrt(ExactReal(1) + Œ∫1^2)*ùíû1))
                # display("Œ∫2")
                # display(Œ∫2)
                œµq = Z13 + Z14*(Z11 + ExactReal(2)*ùíµu2*norm_P)/(ExactReal(1) - Z12 - ExactReal(2)*ùíµu2) + ExactReal(2)*ùíµu3*(norm_P + (Z11 + ExactReal(2)*ùíµu2*norm_P)/(ExactReal(1) - Z12 - ExactReal(2)*ùíµu2))
                œµ = Z13 + Z14*Œ∫2 + (ùíµu3 + ùíû2*sqrt(ExactReal(1) + Œ∫1^2))*(norm_P + Œ∫2)
                return maximum([œµ œµq]),S
            else 
                display("third condition not respected")
                return Nan
            end
        else 
            display("second condition not respected")
            return Nan 
        end 
    else 
        display("first condition not respected")
        return Nan 
    end 


    ###### Counting the number of eigenvalues with positive real part
    k = 1
    nDF = 0 # number of eigenvalues of DF with positive real part
    while inf(real(S[k]) - œµ*abs(S[k]+t) ) > 0
        global k, nDF
        k += 1
        nDF += 1
    end

    ### we verify that the rest of the disks is in the left half-plane
        for n = k:length(S)
            if inf(real(S[n]) + œµ*abs(t+S[n])) >= 0
                display("The disks are not all in the left half-plane, proof of stability is inconclusive")
                return Nan
            end
        end

    display("Number of eigenvalues of DF with positive real part: $nDF")
   

